* FILE: Logic_64_32.sp

********************** begin header *****************************

* Example header file for SPICE

.OPTIONS post ACCT OPTS lvltim=2
.OPTIONS post_version=9007

.option gmindc=   10.0p       

.options ADM_V_SUPPLY=3.3
*.options ADM_ACCURACY=10
*.options ADM_MODE=exp
.options ADM_MODE=acs
*.options ADM_MAXSTEP=10p
.options ignore_meas=0
*.param temper = 105

**################################################
* Corners are TT, SS, FF, SF, FS
.lib '<spice_model_file>' TT
**################################################

.param  arean(w,sdd) = '(w*sdd*1p)'
.param  areap(w,sdd) = '(w*sdd*1p)'
* Setup either one or the other of the following
* For ACM=2 fet models
.param  perin(w,sdd) = '(2u*(w+sdd))'
.param  perip(w,sdd) = '(2u*(w+sdd))'
* For ACM=3 fet models
*.param  perin(w,sdd) = '(1u*(w+2*sdd))'
*.param  perip(w,sdd) = '(1u*(w+2*sdd))'

.param ln_min   =  0.35u
.param lp_min   =  0.35u

* used in source/drain area/perimeter calculation
.param sdd        =  0.95

.PARAM vddp=3.0		$ VDD voltage

VDD vdd 0 DC vddp 

.TEMP 105
.TRAN 10p 16n
*********************** end header ******************************

* SPICE netlist for "Logic_64_32" (generated by MMI_SUE4.4.0)

.SUBCKT nand2 in0 in1 out WP=2 WN=2
M_1 out in0 vdd vdd p W='WP*1u' L=lp_min ad='areap(WP,sdd)' 
+ as='areap(WP,sdd)' pd='perip(WP,sdd)' ps='perip(WP,sdd)' 
M_2 out in0 net_1 gnd n W='WN*1u' L=ln_min ad='arean(WN,sdd)' 
+ as='arean(WN,sdd)' pd='perin(WN,sdd)' ps='perin(WN,sdd)' 
M_3 out in1 vdd vdd p W='WP*1u' L=lp_min ad='areap(WP,sdd)' 
+ as='areap(WP,sdd)' pd='perip(WP,sdd)' ps='perip(WP,sdd)' 
M_4 net_1 in1 gnd gnd n W='WN*1u' L=ln_min ad='arean(WN,sdd)' 
+ as='arean(WN,sdd)' pd='perin(WN,sdd)' ps='perin(WN,sdd)' 
.ENDS	$ nand2

.SUBCKT inverter in out WP=2 LP=lp_min WN=1 LN=ln_min
M_1 out in gnd gnd n W='WN*1u' L=LN ad='arean(WN,sdd)' as='arean(WN,sdd)' 
+ pd='perin(WN,sdd)' ps='perin(WN,sdd)' 
M_2 out in vdd vdd p W='WP*1u' L=LP ad='areap(WP,sdd)' as='areap(WP,sdd)' 
+ pd='perip(WP,sdd)' ps='perip(WP,sdd)' 
.ENDS	$ inverter

.SUBCKT nor2 in0 in1 out WP=4 WN=1
M_1 out in1 gnd gnd n W='WN*1u' L=ln_min ad='arean(WN,sdd)' 
+ as='arean(WN,sdd)' pd='perin(WN,sdd)' ps='perin(WN,sdd)' 
M_2 out in1 net_1 vdd p W='WP*1u' L=lp_min ad='areap(WP,sdd)' 
+ as='areap(WP,sdd)' pd='perip(WP,sdd)' ps='perip(WP,sdd)' 
M_3 out in0 gnd gnd n W='WN*1u' L=ln_min ad='arean(WN,sdd)' 
+ as='arean(WN,sdd)' pd='perin(WN,sdd)' ps='perin(WN,sdd)' 
M_4 net_1 in0 vdd vdd p W='WP*1u' L=lp_min ad='areap(WP,sdd)' 
+ as='areap(WP,sdd)' pd='perip(WP,sdd)' ps='perip(WP,sdd)' 
.ENDS	$ nor2

.SUBCKT xgate in in_L t1 t2 WP=2 WN=1
M_1 t2 in_L t1 vdd p W='WP*1u' L=lp_min ad='areap(WP,sdd)' 
+ as='areap(WP,sdd)' pd='perip(WP,sdd)' ps='perip(WP,sdd)' 
M_2 t2 in t1 gnd n W='WN*1u' L=ln_min ad='arean(WN,sdd)' as='arean(WN,sdd)' 
+ pd='perin(WN,sdd)' ps='perin(WN,sdd)' 
.ENDS	$ xgate

.SUBCKT my_xor in1 in2 out 
Xinverter in1 net_1 inverter 
Xinverter_1 net_2 out inverter WP=6 WN=3
Xinverter_2 in2 net_3 inverter 
Xxgate in1 net_1 in2 net_2 xgate 
Xxgate_1 net_1 in1 net_3 net_2 xgate 
.ENDS	$ my_xor

.SUBCKT MUX_2_1 S0 a b out 
Xnand2 a net_2 net_1 nand2 
Xnand2_1 b S0 net_3 nand2 
Xnand2_2 net_1 net_3 out nand2 
Xinverter S0 net_2 inverter 
.ENDS	$ MUX_2_1

.SUBCKT MUX_4_1 S0 S1 a b c d out 
XMUX_2_1 net_3 a b net_2 MUX_2_1 
XMUX_2_2 S0 c d net_1 MUX_2_1 
XMUX_2_3 S1 net_2 net_1 out MUX_2_1 
Xinverter S0 net_3 inverter 
.ENDS	$ MUX_4_1

.SUBCKT Logic Out S[0] S[1] a b 
Xnand2 a b net_7 nand2 
Xinverter net_7 net_4 inverter 
Xnor2 a b net_5 nor2 
Xinverter_1 net_5 net_2 inverter 
Xmy_xor a b net_1 my_xor 
Xmy_xor_1 a b net_6 my_xor 
Xinverter_2 net_6 net_3 inverter 
XMUX_4_1 S[0] S[1] net_4 net_2 net_1 net_3 Out MUX_4_1 
.ENDS	$ Logic

* start main CELL Logic_64_32
* .SUBCKT Logic_64_32 A[0] A[1] A[2] A[3] A[4] A[5] A[6] A[7] A[8] A[9] 
*+ A[10] A[11] A[12] A[13] A[14] A[15] A[16] A[17] A[18] A[19] A[20] A[21] 
*+ A[22] A[23] A[24] A[25] A[26] A[27] A[28] A[29] A[30] A[31] B[0] B[1] 
*+ B[2] B[3] B[4] B[5] B[6] B[7] B[8] B[9] B[10] B[11] B[12] B[13] B[14] 
*+ B[15] B[16] B[17] B[18] B[19] B[20] B[21] B[22] B[23] B[24] B[25] B[26] 
*+ B[27] B[28] B[29] B[30] B[31] Out[0] Out[1] Out[2] Out[3] Out[4] Out[5] 
*+ Out[6] Out[7] Out[8] Out[9] Out[10] Out[11] Out[12] Out[13] Out[14] 
*+ Out[15] Out[16] Out[17] Out[18] Out[19] Out[20] Out[21] Out[22] Out[23] 
*+ Out[24] Out[25] Out[26] Out[27] Out[28] Out[29] Out[30] Out[31] S[0] 
*+ S[1] 
XLogic Out[0] S[0] S[1] A[0] B[0] Logic 
XLogic_1 Out[1] S[0] S[1] A[1] B[1] Logic 
XLogic_2 Out[2] S[0] S[1] A[2] B[2] Logic 
XLogic_3 Out[3] S[0] S[1] A[3] B[3] Logic 
XLogic_4 Out[4] S[0] S[1] A[4] B[4] Logic 
XLogic_5 Out[5] S[0] S[1] A[5] B[5] Logic 
XLogic_6 Out[6] S[0] S[1] A[6] B[6] Logic 
XLogic_7 Out[7] S[0] S[1] A[7] B[7] Logic 
XLogic_8 Out[8] S[0] S[1] A[8] B[8] Logic 
XLogic_9 Out[9] S[0] S[1] A[9] B[9] Logic 
XLogic_10 Out[10] S[0] S[1] A[10] B[10] Logic 
XLogic_11 Out[11] S[0] S[1] A[11] B[11] Logic 
XLogic_12 Out[12] S[0] S[1] A[12] B[12] Logic 
XLogic_13 Out[13] S[0] S[1] A[13] B[13] Logic 
XLogic_14 Out[14] S[0] S[1] A[14] B[14] Logic 
XLogic_15 Out[15] S[0] S[1] A[15] B[15] Logic 
XLogic_16 Out[16] S[0] S[1] A[16] B[16] Logic 
XLogic_17 Out[17] S[0] S[1] A[17] B[17] Logic 
XLogic_18 Out[18] S[0] S[1] A[18] B[18] Logic 
XLogic_19 Out[19] S[0] S[1] A[19] B[19] Logic 
XLogic_20 Out[20] S[0] S[1] A[20] B[20] Logic 
XLogic_21 Out[21] S[0] S[1] A[21] B[21] Logic 
XLogic_22 Out[22] S[0] S[1] A[22] B[22] Logic 
XLogic_23 Out[23] S[0] S[1] A[23] B[23] Logic 
XLogic_24 Out[24] S[0] S[1] A[24] B[24] Logic 
XLogic_25 Out[25] S[0] S[1] A[25] B[25] Logic 
XLogic_26 Out[26] S[0] S[1] A[26] B[26] Logic 
XLogic_27 Out[27] S[0] S[1] A[27] B[27] Logic 
XLogic_28 Out[28] S[0] S[1] A[28] B[28] Logic 
XLogic_29 Out[29] S[0] S[1] A[29] B[29] Logic 
XLogic_30 Out[30] S[0] S[1] A[30] B[30] Logic 
XLogic_31 Out[31] S[0] S[1] A[31] B[31] Logic 
* .ENDS	$ Logic_64_32

.GLOBAL gnd vdd

.END

