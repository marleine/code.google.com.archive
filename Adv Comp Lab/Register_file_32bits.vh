// FILE: Register_file_32bits.vh

// ************************************************************************

// default verilog header file

// units of time and time resolution for this run
`timescale 1ps / 1ps

// this must be the very first module for interactive probing to work
module test;

// reg		a;
// wire		b;

// needed for interactive verilog probing.
   integer         tmp_channel;

// instantiate main verilog module
// NOTE: the name of the module must be the same as its type

	Register_file_32bits Register_file_32bits();

    initial
      begin
//    	$dumpfile();
//	$dumpvars;

//	a = 0;

// #1000 	a = 1; 

// #2000 	a = 0; 

//	$finish;
      end

endmodule

// include files
// `include "foo.v"

// ************************************************************************

// VERILOG netlist for "Register_file_32bits" (generated by 
//		MMI_SUE4.4.0)

module writeEnable (in, out, writeBit);
	input		writeBit;
	input	[31:0]	in;
	output	[31:0]	out;
 
	wire		net_28;
	wire		net_11;
	wire		net_30;
	wire		net_29;
	wire		net_12;
	wire		net_31;
	wire		net_13;
	wire		net_32;
	wire		net_14;
	wire		net_15;
	wire		net_16;
	wire		net_17;
	wire		net_18;
	wire		net_1;
	wire		net_20;
	wire		net_19;
	wire		net_2;
	wire		net_21;
	wire		net_3;
	wire		net_22;
	wire		net_4;
	wire		net_23;
	wire		net_5;
	wire		net_24;
	wire		net_6;
	wire		net_25;
	wire		net_7;
	wire		net_26;
	wire		net_8;
	wire		net_27;
	wire		net_10;
	wire		net_9;
 
	assign #0 net_5 = !(in[0] && writeBit);
	not #0 inv(out[0], net_5);
	assign #0 net_14 = !(in[1] && writeBit);
	not #0 inv_1(out[1], net_14);
	assign #0 net_23 = !(in[2] && writeBit);
	not #0 inv_2(out[2], net_23);
	assign #0 net_1 = !(in[3] && writeBit);
	not #0 inv_3(out[3], net_1);
	assign #0 net_10 = !(in[4] && writeBit);
	not #0 inv_4(out[4], net_10);
	assign #0 net_19 = !(in[5] && writeBit);
	not #0 inv_5(out[5], net_19);
	assign #0 net_30 = !(in[6] && writeBit);
	not #0 inv_6(out[6], net_30);
	assign #0 net_7 = !(in[7] && writeBit);
	not #0 inv_7(out[7], net_7);
	assign #0 net_16 = !(in[8] && writeBit);
	not #0 inv_8(out[8], net_16);
	assign #0 net_25 = !(in[9] && writeBit);
	not #0 inv_9(out[9], net_25);
	assign #0 net_29 = !(in[10] && writeBit);
	not #0 inv_10(out[10], net_29);
	assign #0 net_6 = !(in[11] && writeBit);
	not #0 inv_11(out[11], net_6);
	assign #0 net_15 = !(in[12] && writeBit);
	not #0 inv_12(out[12], net_15);
	assign #0 net_24 = !(in[13] && writeBit);
	not #0 inv_13(out[13], net_24);
	assign #0 net_2 = !(in[14] && writeBit);
	not #0 inv_14(out[14], net_2);
	assign #0 net_11 = !(in[15] && writeBit);
	not #0 inv_15(out[15], net_11);
	assign #0 net_21 = !(in[16] && writeBit);
	not #0 inv_16(out[16], net_21);
	assign #0 net_32 = !(in[17] && writeBit);
	not #0 inv_17(out[17], net_32);
	assign #0 net_9 = !(in[18] && writeBit);
	not #0 inv_18(out[18], net_9);
	assign #0 net_18 = !(in[19] && writeBit);
	not #0 inv_19(out[19], net_18);
	assign #0 net_28 = !(in[20] && writeBit);
	not #0 inv_20(out[20], net_28);
	assign #0 net_27 = !(in[21] && writeBit);
	not #0 inv_21(out[21], net_27);
	assign #0 net_3 = !(in[22] && writeBit);
	not #0 inv_22(out[22], net_3);
	assign #0 net_12 = !(in[23] && writeBit);
	not #0 inv_23(out[23], net_12);
	assign #0 net_20 = !(in[24] && writeBit);
	not #0 inv_24(out[24], net_20);
	assign #0 net_31 = !(in[25] && writeBit);
	not #0 inv_25(out[25], net_31);
	assign #0 net_8 = !(in[26] && writeBit);
	not #0 inv_26(out[26], net_8);
	assign #0 net_17 = !(in[27] && writeBit);
	not #0 inv_27(out[27], net_17);
	assign #0 net_26 = !(in[28] && writeBit);
	not #0 inv_28(out[28], net_26);
	assign #0 net_4 = !(in[29] && writeBit);
	not #0 inv_29(out[29], net_4);
	assign #0 net_13 = !(in[30] && writeBit);
	not #0 inv_30(out[30], net_13);
	assign #0 net_22 = !(in[31] && writeBit);
	not #0 inv_31(out[31], net_22);

endmodule		// writeEnable

module Dec_2x4 (a, enable, outD);
	input		enable;
	input	[1:0]	a;
	output	[3:0]	outD;
 
	wire		net_6;
	wire		net_2;
	wire		net_7;
	wire		net_3;
	wire		net_8;
	wire		net_4;
	wire		net_5;
	wire		net_1;
 
	not #0 inv(net_1, a[0]);
	not #0 inv_1(net_8, a[1]);
	assign #0 net_7 = !(enable && net_1 && net_8);
	not #0 inv_2(net_5, a[1]);
	assign #0 net_4 = !(enable && a[0] && net_5);
	assign #0 net_2 = !(enable && net_3 && a[1]);
	not #0 inv_3(net_3, a[0]);
	assign #0 net_6 = !(enable && a[0] && a[1]);
	not #0 inv_4(outD[0], net_7);
	not #0 inv_5(outD[1], net_4);
	not #0 inv_6(outD[2], net_2);
	not #0 inv_7(outD[3], net_6);

endmodule		// Dec_2x4

module Dec_3x8 (a, out2D);
	input	[2:0]	a;
	output	[7:0]	out2D;
 
	wire		net_11;
	wire		net_1;
	wire		net_2;
	wire		net_3;
	wire		net_4;
	wire		net_5;
	wire		net_6;
	wire		net_7;
	wire		net_8;
	wire		net_10;
	wire		net_9;
 
	not #0 inv(net_2, a[0]);
	not #0 inv_1(net_1, a[1]);
	not #0 inv_2(net_3, a[2]);
	assign #0 net_7 = !(net_2 && net_1 && a[2]);
	not #0 inv_3(out2D[1], net_7);
	assign #0 net_6 = !(net_2 && a[1] && net_3);
	not #0 inv_4(out2D[2], net_6);
	assign #0 net_4 = !(net_2 && a[1] && a[2]);
	not #0 inv_5(out2D[3], net_4);
	assign #0 net_11 = !(a[0] && net_1 && net_3);
	not #0 inv_6(out2D[4], net_11);
	assign #0 net_10 = !(a[0] && net_1 && a[2]);
	not #0 inv_7(out2D[5], net_10);
	assign #0 net_8 = !(a[0] && a[1] && net_3);
	not #0 inv_8(out2D[6], net_8);
	assign #0 net_5 = !(a[0] && a[1] && a[2]);
	not #0 inv_9(out2D[7], net_5);
	assign #0 net_9 = !(net_2 && net_1 && net_3);
	not #0 inv_10(out2D[0], net_9);

endmodule		// Dec_3x8

module Dec_5x32 (in, outD5);
	input	[4:0]	in;
	output	[31:0]	outD5;
 
	wire	[7:0]	out;
 
	Dec_3x8 Dec_3x8(.out2D(out[7:0]), .a(in[4:2]));
	Dec_2x4 Dec_2x4(.enable(out[0]), .outD(outD5[3:0]), .a(in[1:0]));
	Dec_2x4 Dec_2x4_1(.enable(out[1]), .outD(outD5[7:4]), .a(in[1:0]));
	Dec_2x4 Dec_2x4_2(.enable(out[2]), .outD(outD5[11:8]), .a(in[1:0]));
	Dec_2x4 Dec_2x4_3(.enable(out[3]), .outD(outD5[15:12]), .a(in[1:0]));
	Dec_2x4 Dec_2x4_4(.enable(out[4]), .outD(outD5[19:16]), .a(in[1:0]));
	Dec_2x4 Dec_2x4_5(.enable(out[5]), .outD(outD5[23:20]), .a(in[1:0]));
	Dec_2x4 Dec_2x4_6(.enable(out[6]), .outD(outD5[27:24]), .a(in[1:0]));
	Dec_2x4 Dec_2x4_7(.enable(out[7]), .outD(outD5[31:28]), .a(in[1:0]));

endmodule		// Dec_5x32

module Reg0_1bit (R1, R2, out1, out2);
	input		R1;
	input		R2;
	output		out1;
	output		out2;
 
	nmos n(out1,1'b0,R1);
	nmos n_1(out2,1'b0,R2);

endmodule		// Reg0_1bit

module Reg0_32bit (R1, R2, out1, out2);
	input		R1;
	input		R2;
	output	[31:0]	out1;
	output	[31:0]	out2;
 
	Reg0_1bit Reg0_1bit(.R2(R2), .out1(out1[0]), .out2(out2[0]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_1(.R2(R2), .out1(out1[1]), .out2(out2[1]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_2(.R2(R2), .out1(out1[2]), .out2(out2[2]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_3(.R2(R2), .out1(out1[3]), .out2(out2[3]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_4(.R2(R2), .out1(out1[4]), .out2(out2[4]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_5(.R2(R2), .out1(out1[5]), .out2(out2[5]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_6(.R2(R2), .out1(out1[6]), .out2(out2[6]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_7(.R2(R2), .out1(out1[7]), .out2(out2[7]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_8(.R2(R2), .out1(out1[8]), .out2(out2[8]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_9(.R2(R2), .out1(out1[9]), .out2(out2[9]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_10(.R2(R2), .out1(out1[10]), .out2(out2[10]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_11(.R2(R2), .out1(out1[11]), .out2(out2[11]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_12(.R2(R2), .out1(out1[12]), .out2(out2[12]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_13(.R2(R2), .out1(out1[13]), .out2(out2[13]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_14(.R2(R2), .out1(out1[14]), .out2(out2[14]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_15(.R2(R2), .out1(out1[15]), .out2(out2[15]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_16(.R2(R2), .out1(out1[16]), .out2(out2[16]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_17(.R2(R2), .out1(out1[17]), .out2(out2[17]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_18(.R2(R2), .out1(out1[18]), .out2(out2[18]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_19(.R2(R2), .out1(out1[19]), .out2(out2[19]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_20(.R2(R2), .out1(out1[20]), .out2(out2[20]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_21(.R2(R2), .out1(out1[21]), .out2(out2[21]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_22(.R2(R2), .out1(out1[22]), .out2(out2[22]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_23(.R2(R2), .out1(out1[23]), .out2(out2[23]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_24(.R2(R2), .out1(out1[24]), .out2(out2[24]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_25(.R2(R2), .out1(out1[25]), .out2(out2[25]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_26(.R2(R2), .out1(out1[26]), .out2(out2[26]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_27(.R2(R2), .out1(out1[27]), .out2(out2[27]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_28(.R2(R2), .out1(out1[28]), .out2(out2[28]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_29(.R2(R2), .out1(out1[29]), .out2(out2[29]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_30(.R2(R2), .out1(out1[30]), .out2(out2[30]), 
		.R1(R1));
	Reg0_1bit Reg0_1bit_31(.R2(R2), .out1(out1[31]), .out2(out2[31]), 
		.R1(R1));

endmodule		// Reg0_32bit

module Reg_32bit (R1, R2, data, out1, out2, write);
	input		R1;
	input		R2;
	input		write;
	input	[31:0]	data;
	output	[31:0]	out1;
	output	[31:0]	out2;
 
	Reg_1bit Reg_1bit (.data(data[0]), .R1(R1), .R2(R2), .write(write), 
		.out1(out1[0]), .out2(out2[0]));
	Reg_1bit Reg_1bit_1 (.data(data[1]), .R1(R1), .R2(R2), .write(write), 
		.out1(out1[1]), .out2(out2[1]));
	Reg_1bit Reg_1bit_2 (.data(data[2]), .R1(R1), .R2(R2), .write(write), 
		.out1(out1[2]), .out2(out2[2]));
	Reg_1bit Reg_1bit_3 (.data(data[3]), .R1(R1), .R2(R2), .write(write), 
		.out1(out1[3]), .out2(out2[3]));
	Reg_1bit Reg_1bit_4 (.data(data[4]), .R1(R1), .R2(R2), .write(write), 
		.out1(out1[4]), .out2(out2[4]));
	Reg_1bit Reg_1bit_5 (.data(data[5]), .R1(R1), .R2(R2), .write(write), 
		.out1(out1[5]), .out2(out2[5]));
	Reg_1bit Reg_1bit_6 (.data(data[6]), .R1(R1), .R2(R2), .write(write), 
		.out1(out1[6]), .out2(out2[6]));
	Reg_1bit Reg_1bit_7 (.data(data[7]), .R1(R1), .R2(R2), .write(write), 
		.out1(out1[7]), .out2(out2[7]));
	Reg_1bit Reg_1bit_8 (.data(data[8]), .R1(R1), .R2(R2), .write(write), 
		.out1(out1[8]), .out2(out2[8]));
	Reg_1bit Reg_1bit_9 (.data(data[9]), .R1(R1), .R2(R2), .write(write), 
		.out1(out1[9]), .out2(out2[9]));
	Reg_1bit Reg_1bit_10 (.data(data[10]), .R1(R1), .R2(R2), 
		.write(write), .out1(out1[10]), .out2(out2[10]));
	Reg_1bit Reg_1bit_11 (.data(data[11]), .R1(R1), .R2(R2), 
		.write(write), .out1(out1[11]), .out2(out2[11]));
	Reg_1bit Reg_1bit_12 (.data(data[12]), .R1(R1), .R2(R2), 
		.write(write), .out1(out1[12]), .out2(out2[12]));
	Reg_1bit Reg_1bit_13 (.data(data[13]), .R1(R1), .R2(R2), 
		.write(write), .out1(out1[13]), .out2(out2[13]));
	Reg_1bit Reg_1bit_14 (.data(data[14]), .R1(R1), .R2(R2), 
		.write(write), .out1(out1[14]), .out2(out2[14]));
	Reg_1bit Reg_1bit_15 (.data(data[15]), .R1(R1), .R2(R2), 
		.write(write), .out1(out1[15]), .out2(out2[15]));
	Reg_1bit Reg_1bit_16 (.data(data[16]), .R1(R1), .R2(R2), 
		.write(write), .out1(out1[16]), .out2(out2[16]));
	Reg_1bit Reg_1bit_17 (.data(data[17]), .R1(R1), .R2(R2), 
		.write(write), .out1(out1[17]), .out2(out2[17]));
	Reg_1bit Reg_1bit_18 (.data(data[18]), .R1(R1), .R2(R2), 
		.write(write), .out1(out1[18]), .out2(out2[18]));
	Reg_1bit Reg_1bit_19 (.data(data[19]), .R1(R1), .R2(R2), 
		.write(write), .out1(out1[19]), .out2(out2[19]));
	Reg_1bit Reg_1bit_20 (.data(data[20]), .R1(R1), .R2(R2), 
		.write(write), .out1(out1[20]), .out2(out2[20]));
	Reg_1bit Reg_1bit_21 (.data(data[21]), .R1(R1), .R2(R2), 
		.write(write), .out1(out1[21]), .out2(out2[21]));
	Reg_1bit Reg_1bit_22 (.data(data[22]), .R1(R1), .R2(R2), 
		.write(write), .out1(out1[22]), .out2(out2[22]));
	Reg_1bit Reg_1bit_23 (.data(data[23]), .R1(R1), .R2(R2), 
		.write(write), .out1(out1[23]), .out2(out2[23]));
	Reg_1bit Reg_1bit_24 (.data(data[24]), .R1(R1), .R2(R2), 
		.write(write), .out1(out1[24]), .out2(out2[24]));
	Reg_1bit Reg_1bit_25 (.data(data[25]), .R1(R1), .R2(R2), 
		.write(write), .out1(out1[25]), .out2(out2[25]));
	Reg_1bit Reg_1bit_26 (.data(data[26]), .R1(R1), .R2(R2), 
		.write(write), .out1(out1[26]), .out2(out2[26]));
	Reg_1bit Reg_1bit_27 (.data(data[27]), .R1(R1), .R2(R2), 
		.write(write), .out1(out1[27]), .out2(out2[27]));
	Reg_1bit Reg_1bit_28 (.data(data[28]), .R1(R1), .R2(R2), 
		.write(write), .out1(out1[28]), .out2(out2[28]));
	Reg_1bit Reg_1bit_29 (.data(data[29]), .R1(R1), .R2(R2), 
		.write(write), .out1(out1[29]), .out2(out2[29]));
	Reg_1bit Reg_1bit_30 (.data(data[30]), .R1(R1), .R2(R2), 
		.write(write), .out1(out1[30]), .out2(out2[30]));
	Reg_1bit Reg_1bit_31 (.data(data[31]), .R1(R1), .R2(R2), 
		.write(write), .out1(out1[31]), .out2(out2[31]));

endmodule		// Reg_32bit

module Register_file_32bits (address_read1, address_read2, 
		address_write, data, out1, out2, write_enable);
	input		write_enable;
	input	[4:0]	address_read1;
	input	[4:0]	address_read2;
	input	[4:0]	address_write;
	input	[31:0]	data;
	output	[31:0]	out1;
	output	[31:0]	out2;
 
	wire	[31:0]	inR1;
	wire	[31:0]	net_1;
	wire	[31:0]	inR2;
	wire	[31:0]	w;
 
	writeEnable writeEnable(.in(net_1[31:0]), .writeBit(write_enable), 
		.out(w[31:0]));
	Dec_5x32 Dec_5x32(.outD5(net_1[31:0]), .in(address_write[4:0]));
	Dec_5x32 Dec_5x32_1(.in(address_read2[4:0]), .outD5(inR2[31:0]));
	Dec_5x32 Dec_5x32_2(.in(address_read1[4:0]), .outD5(inR1[31:0]));
	Reg0_32bit Reg0_32bit(.out1(out1[31:0]), .R1(inR1[0]), 
		.out2(out2[31:0]), .R2(inR2[0]));
	Reg_32bit Reg_32bit(.out1(out1[31:0]), .R1(inR1[1]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[1]), .write(w[1]));
	Reg_32bit Reg_32bit_1(.out1(out1[31:0]), .R1(inR1[2]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[2]), .write(w[2]));
	Reg_32bit Reg_32bit_2(.out1(out1[31:0]), .R1(inR1[3]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[3]), .write(w[3]));
	Reg_32bit Reg_32bit_3(.out1(out1[31:0]), .R1(inR1[4]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[4]), .write(w[4]));
	Reg_32bit Reg_32bit_4(.out1(out1[31:0]), .R1(inR1[5]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[5]), .write(w[5]));
	Reg_32bit Reg_32bit_5(.out1(out1[31:0]), .R1(inR1[6]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[6]), .write(w[6]));
	Reg_32bit Reg_32bit_6(.out1(out1[31:0]), .R1(inR1[7]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[7]), .write(w[7]));
	Reg_32bit Reg_32bit_7(.out1(out1[31:0]), .R1(inR1[8]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[8]), .write(w[8]));
	Reg_32bit Reg_32bit_8(.out1(out1[31:0]), .R1(inR1[9]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[9]), .write(w[9]));
	Reg_32bit Reg_32bit_9(.out1(out1[31:0]), .R1(inR1[10]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[10]), .write(w[10]));
	Reg_32bit Reg_32bit_10(.out1(out1[31:0]), .R1(inR1[11]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[11]), .write(w[11]));
	Reg_32bit Reg_32bit_11(.out1(out1[31:0]), .R1(inR1[12]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[12]), .write(w[12]));
	Reg_32bit Reg_32bit_12(.out1(out1[31:0]), .R1(inR1[13]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[13]), .write(w[13]));
	Reg_32bit Reg_32bit_13(.out1(out1[31:0]), .R1(inR1[14]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[14]), .write(w[14]));
	Reg_32bit Reg_32bit_14(.out1(out1[31:0]), .R1(inR1[15]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[15]), .write(w[15]));
	Reg_32bit Reg_32bit_15(.out1(out1[31:0]), .R1(inR1[16]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[16]), .write(w[16]));
	Reg_32bit Reg_32bit_16(.out1(out1[31:0]), .R1(inR1[17]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[17]), .write(w[17]));
	Reg_32bit Reg_32bit_17(.out1(out1[31:0]), .R1(inR1[18]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[18]), .write(w[18]));
	Reg_32bit Reg_32bit_18(.out1(out1[31:0]), .R1(inR1[19]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[19]), .write(w[19]));
	Reg_32bit Reg_32bit_19(.out1(out1[31:0]), .R1(inR1[20]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[20]), .write(w[20]));
	Reg_32bit Reg_32bit_20(.out1(out1[31:0]), .R1(inR1[21]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[21]), .write(w[21]));
	Reg_32bit Reg_32bit_21(.out1(out1[31:0]), .R1(inR1[22]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[22]), .write(w[22]));
	Reg_32bit Reg_32bit_22(.out1(out1[31:0]), .R1(inR1[23]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[23]), .write(w[23]));
	Reg_32bit Reg_32bit_23(.out1(out1[31:0]), .R1(inR1[24]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[24]), .write(w[24]));
	Reg_32bit Reg_32bit_24(.out1(out1[31:0]), .R1(inR1[25]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[25]), .write(w[25]));
	Reg_32bit Reg_32bit_25(.out1(out1[31:0]), .R1(inR1[26]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[26]), .write(w[26]));
	Reg_32bit Reg_32bit_26(.out1(out1[31:0]), .R1(inR1[27]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[27]), .write(w[27]));
	Reg_32bit Reg_32bit_27(.out1(out1[31:0]), .R1(inR1[28]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[28]), .write(w[28]));
	Reg_32bit Reg_32bit_28(.out1(out1[31:0]), .R1(inR1[29]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[29]), .write(w[29]));
	Reg_32bit Reg_32bit_29(.out1(out1[31:0]), .R1(inR1[30]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[30]), .write(w[30]));
	Reg_32bit Reg_32bit_30(.out1(out1[31:0]), .R1(inR1[31]), 
		.out2(out2[31:0]), .data(data[31:0]), .R2(inR2[31]), .write(w[31]));

endmodule		// Register_file_32bits

